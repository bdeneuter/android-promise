{"name":"Android-promise","tagline":"","body":"### Promise/Deferred\r\n\r\nA deferred object allows you to separate the following two concerns:\r\n\r\n* Work on the background\r\n* Doing something with the result\r\n\r\nUsing the api should be easy and straight forward without too much boiler plate.\r\nTo execute code in the background:\r\n\r\n```java\r\nPromise<String> promise = Function.execute(new Callable<String>() {\r\n    @Override\r\n    public String call() throws Exception {\r\n        // This method will run on a background thread\r\n        return \"Hello world!\";\r\n    }\r\n});\r\n```\r\n\r\nOr in Android studio it will be readable like this:\r\n\r\n```java\r\nPromise<String> promise = execute(() -> {return \"Hello world!\";});\r\n```\r\n\r\nThis promise can be used to add tasks that needs to be executed on success or on error.\r\nAn example:\r\n\r\n```java\r\npromise.thenOnMainThread(new Task<String>() {\r\n    @Override\r\n    public void run(String message) {\r\n        Toast.makeText(getContext(), message, LENGTH_LONG);\r\n    }\r\n})\r\n.onErrorOnMainThread(new Task<Throwable>() {\r\n    @Override\r\n    public void run(Throwable data) {\r\n        Toast.makeText(getContext(), \"Oops!\", LENGTH_LONG);\r\n    }\r\n});\r\n```\r\n\r\nAnd in Android Studio it will look like:\r\n```java\r\npromise.thenOnMainThread(() -> {Toast.makeText(getContext(), message, LENGTH_LONG);})\r\n       .onErrorOnMainThread(() -> {Toast.makeText(getContext(), \"Oops!\", LENGTH_LONG);});\r\n```\r\n\r\nYou don't have to worry about the promise already been resolved or not. If the promise is not resolved, the task will be scheduled to be executed when the promise is resolved. \r\nThe task will be executed immediately if the promise is already resolved.\r\nThe order of the tasks is respected for tasks that are scheduled on the same thread.\r\n\r\n### Threads\r\n\r\nYou can schedule tasks to be executed on different threads:\r\n\r\n* **then(Task<T>), onError(Task<Throwable>):** \r\nThe task will be executed on the same thread that resolved the promise\r\n* **thenOnMainThread(Task<T>), onErrorOnMainThread(Task<Throwable>):** The task will be executed on the main thread. On this thread the UI can be updated.\r\n* **thenOnBackgroundThread(Task<T>), onErrorOnBackgroundThread(Task<Throwable>):** The task will not be executed on the main thread. If the current thread is the main thread, the task will be executed on a background thread.\r\n* **thenAsync(Task<T>), onErrorAsync(Task<Throwable>):** The task will always be executed on a new thread.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}